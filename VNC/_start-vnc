#!/bin/bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )


SSH_TO_COMPUTE="no"
SUPERCOMPUTER=lumi
MAIN_URL=$SUPERCOMPUTER.csc.fi


if [[ "$SSH_TO_COMPUTE" == "yes" ]];then
    _HN=localhost
    _TARGET_HOST="$USER@$(hostname)"
    _JUMP_HOST=" -J $USER@$MAIN_URL"
elif [[ "$SSH_TO_COMPUTE" == "no" ]]; then
    _HN=$(hostname)
    _TARGET_HOST="$USER@$MAIN_URL"
    _JUMP_HOST=""
else
    echo "FATAL (internal error): Unsupported value for SSH_TO_COMPUTE "
    exit 1 
fi



function cleanup {
   if [[ ${_D+defined} ]];then
       $C_CMD /opt/TurboVNC/bin/vncserver -kill :$_D 2>/dev/null 
       rm -f  /tmp/.X11-unix/X$_D
       rm -f  /tmp/.X$_D-lock
       kill -1 $novnc_pp &>/dev/null
       kill -1 $novnc_p &>/dev/null
       kill $(jobs -p) &>/dev/null
   fi
   exit 1
}

function _msg {
    echo -e "$1"
}


POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --debug)
      keep_log_file=1
      shift
      ;;
    --no-wm)
      nowm=1
      shift
      ;;
    --help|-h)
      echo -e "Usage: start-vnc [OPTIONS]
Tool to start VNC server and print out connection information.
Uses turbovnc and novnc. By default will start the fluxbox window manager 

Options:
    -h, --help      Show this message and exit

    --debug         Save novnc output to log file

    --no-wm         Don't start the window manager 

" 
      exit 0
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

if [[ ${keep_log_file+defined} ]];then
    NOVNC_LOG=novnc.log
else
    NOVNC_LOG=/dev/null
fi

_MOUNTS=/var/spool,/tmp,/tmp:/run,$PWD
_PASS=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 8 ; echo '')
_VNC_CONTAINER=$SCRIPT_DIR/vnc.sif
_STARTUP_FILE=$SCRIPT_DIR/xstartup.turbovnc
if [[ ! -e "$_VNC_CONTAINER" ]]; then
    echo "FATAL (internal error):  Could not find vnc base container" 
    exit 1
elif [[ ! -e "$_STARTUP_FILE" ]];then
    echo "FATAL (internal error):  Could not find xstartup.turbovnc" 
    exit 1
fi

C_CMD="singularity exec -B $_MOUNTS $_VNC_CONTAINER"

_msg "StartTime: $(date +"%Y-%m-%dT%H:%M:%S")"
_msg "Generating password"
echo "$_PASS" | $C_CMD /opt/TurboVNC/bin/vncpasswd -f > ~/.vnc/passwd
_msg "Starting vnc server"
trap cleanup EXIT INT

vnc_start_file=$(mktemp /tmp/vnc_start.XXXXXX)
if [[ ${nowm+defined} ]];then
    $C_CMD /opt/TurboVNC/bin/vncserver -noxstartup 2> $vnc_start_file
else
    $C_CMD /opt/TurboVNC/bin/vncserver -xstartup $_STARTUP_FILE  2> $vnc_start_file
fi
vnc_server_pid=$!

_D=$(grep Desk $vnc_start_file  | cut -d ":" -f4)
_P=$( grep "VNC conn" $(grep "Log file" $vnc_start_file | cut -d " " -f4) | rev | cut -d " " -f1 | rev)
_msg  "\tVnc server running on display :$_D"
_msg  "\tVnc port: $_P"

if [[ ${keep_log_file+defined} ]];then
    _msg "=====DEBUG=========="
    cat $vnc_start_file
    _msg "===================="
fi
rm $vnc_start_file

export DISPLAY=":$_D"

timeout=60
wait_time=0
pause_time=1


_msg "Starting novnc proxy ( ${timeout}sec timeout )"
$C_CMD /opt/noVNC/utils/novnc_proxy --vnc localhost:$_P --listen $_HN:0 &> $NOVNC_LOG &
novnc_pp=$!
if [[ ${keep_log_file+defined} ]];then
   _msg  "\tNovnc log saved to $NOVNC_LOG"
fi



export novnc_p=""
while [[ -z "$novnc_p" || "$(echo "$novnc_p" | wc -l)" -gt 1  ]]; do
    sleep $pause_time
    wait_time=$((wait_time + pause_time))
    export novnc_p=$(pgrep -P $(pgrep -P $novnc_pp) 2>/dev/null)
    if [[ $wait_time -gt $timeout ]];then
        _msg "Timeout waiting for novnc proxy to start"
        exit 1
    fi 
    ps -p $novnc_pp &>/dev/null || { echo "Novnc exit unexpectedly" ; exit 1 ;}
done
# novnc does not display the port correctly when passed 0 as the port number
# so we need to find it out. 
wait_time=0
_msg "Resolving novnc proxy port ( ${timeout}sec timeout)"
export _VNC_PORT=$(lsof -i -p $novnc_p  2>/dev/null | grep $novnc_p | grep TCP | cut -d ":" -f2 | cut -d " " -f1)
while [[ -z "$_VNC_PORT"  ]];do
    sleep $pause_time
    wait_time=$((wait_time + pause_time))
    export _VNC_PORT=$(lsof -i -p $novnc_p  2>/dev/null | grep $novnc_p | grep TCP | cut -d ":" -f2 | cut -d " " -f1)
    if [[ $wait_time -gt $timeout ]];then
        _msg "Failed to resolve port for novnc proxy"
        exit 1
    fi 
    ps -p $novnc_pp &>/dev/null || { echo "Novnc exit unexpectedly" ; exit 1 ;}
done

_msg  "\tNovnc proxy on port: $_VNC_PORT"

_msg  "\n\nCONNECT WITH BROWSER
==================
Run on local machine to forward vnc connection from $SUPERCOMPUTER to local computer, if the port is in use locally change the port 
    ssh -N -L $_VNC_PORT:$_HN:$_VNC_PORT $_JUMP_HOST $_TARGET_HOST
Connect to this url in browser on local machine after running , port needs to be the same as in the ssh command (left value)
    http://localhost:$_VNC_PORT/vnc.html?password=$_PASS
=================="

_msg  "\nCONNECT WITH VNC CLIENT
==================
Run on local machine to forward vnc connection from $SUPERCOMPUTER to local computer, if the port is in use locally change the port (left value)
    ssh -N -L $_P:$_HN:$_P $_JUMP_HOST $_TARGET_HOST
Connect with native (locally installed) vnc client, e.g TigerVNC
    vncviewer localhost:$_P
When prompted for a password, use $_PASS
=================="

wait $vnc_server_pid
